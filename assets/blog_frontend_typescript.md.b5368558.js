import{_ as s,o,c as a,V as l}from"./chunks/framework.90ed47bb.js";const F=JSON.parse('{"title":"TS","description":"","frontmatter":{},"headers":[],"relativePath":"blog/frontend/typescript.md","filePath":"blog/frontend/typescript.md"}'),n={name:"blog/frontend/typescript.md"},e=l(`<h1 id="ts" tabindex="-1">TS <a class="header-anchor" href="#ts" aria-label="Permalink to &quot;TS&quot;">​</a></h1><h2 id="为什么要使用-typescript" tabindex="-1">为什么要使用 TypeScript <a class="header-anchor" href="#为什么要使用-typescript" aria-label="Permalink to &quot;为什么要使用 TypeScript&quot;">​</a></h2><p><strong><a href="https://2021.stateofjs.com/zh-Hans/other-tools" target="_blank" rel="noreferrer">2021 年 JavaScript 生态的发展</a></strong></p><p><code>TypeScript</code> 是一门静态类型、弱类型的语言。 它的设计目标之一是让你在 <code>TypeScript</code> 中安全、轻松地使用现有的 <code>JavaScript</code> 库。</p><ul><li><strong>ts 优势</strong>： <ul><li><code>类型检测</code>：能让一些错误在开发阶段就能暴露出来。</li><li><code>语法提示</code>：IDE 会根据你当前的上下文，把你能用的类、变量、方法和关键字都给你提示出来。</li><li><code>重构</code>：IDE 会帮你自动引用这个变量或者调用这个方法地方的代码自动帮你修改掉，这个特性一个是会提高你的开发效率，另一个是可以很容易的提升你的代码质量。</li></ul></li></ul><h2 id="初始化一个-typescript-项目" tabindex="-1">初始化一个 TypeScript 项目 <a class="header-anchor" href="#初始化一个-typescript-项目" aria-label="Permalink to &quot;初始化一个 TypeScript 项目&quot;">​</a></h2><p><code>tsc</code> ts 的编译器, 用于将 ts 转成 js。</p><p>全局安装 tsc <code>npm i -g typescript</code> 或者 <code>yarn global add typescript</code> 。</p><p>命令: <code>tsc --init</code> 。</p><p>生成 <code>tsconfig.json</code> 文件。</p><h2 id="typescript-的几种文件" tabindex="-1">TypeScript 的几种文件 <a class="header-anchor" href="#typescript-的几种文件" aria-label="Permalink to &quot;TypeScript 的几种文件&quot;">​</a></h2><ul><li>.ts</li><li>.tsx</li><li>.d.ts <ul><li>里面不允许有任何函数的实现.</li><li>顶层作用域里面只能出现 <code>declare</code>, <code>import</code>, <code>export</code>, <code>interface</code> 以及 <code>三斜线指令</code>.</li></ul></li></ul><h2 id="lib-d-ts" tabindex="-1">lib.d.ts <a class="header-anchor" href="#lib-d-ts" aria-label="Permalink to &quot;lib.d.ts&quot;">​</a></h2><p>安装 <code>TypeScript</code> 时，会顺带安装一个 <code>lib.d.ts</code> 声明文件。这个文件包含 <code>JavaScript</code> 运行时以及 DOM 中存在各种常见的环境声明。</p><h2 id="声明空间" tabindex="-1">声明空间 <a class="header-anchor" href="#声明空间" aria-label="Permalink to &quot;声明空间&quot;">​</a></h2><ul><li><p><strong>类型声明空间</strong></p><blockquote><p>包括能够当作注解的内容，可以理解成对类型进行编程。</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span></code></pre></div></li><li><p><strong>变量声明空间</strong></p><blockquote><p>和 js 的写法一样，声明一些变量。</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div></li></ul><h2 id="typescript-的类型系统" tabindex="-1">TypeScript 的类型系统 <a class="header-anchor" href="#typescript-的类型系统" aria-label="Permalink to &quot;TypeScript 的类型系统&quot;">​</a></h2><h3 id="类型推断" tabindex="-1">类型推断： <a class="header-anchor" href="#类型推断" aria-label="Permalink to &quot;类型推断：&quot;">​</a></h3><pre><code>如果没有明确的指定类型，那么 \`TypeScript\` 会依照类型推论（Type Inference）的规则推断出一个类型。
</code></pre><h3 id="类型" tabindex="-1">类型： <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型：&quot;">​</a></h3><ul><li>原始类型: <code>number</code>, <code>string</code>, <code>boolean</code>, <code>symbol</code>, <code>bigint</code>, <code>null</code>, <code>undefined。</code><br><strong>补充</strong>: <blockquote><p>类型名称<code>String</code>, <code>Number</code> 和 <code>Boolean</code> 也是合法的, 但是它们引入了一些特殊的内置类型，这些类型很少在代码中出现，所以请始终使用 <code>string</code>, <code>number</code>, <code>boolean</code>。</p></blockquote></li><li>对象类型: 数组, 对象(<code>Object</code>, <code>object</code>, <code>{}</code>), 函数等。 <br></li><li>ts 新增类型 <code>any</code>, <code>unknow</code><code>void</code>(表示没有任何返回值的函数) <code>enum</code><code>元组类型</code><code>接口</code><code>readonly</code>(与 <code>const</code> 的不同) <code>类型别名</code><code>联合类型</code><code>交叉类型</code><code>never</code><code>泛型</code>(是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性) <code>private</code>, <code>protected</code>, <code>public</code><br></li></ul><h3 id="注意点" tabindex="-1">注意点： <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点：&quot;">​</a></h3><ul><li><strong>any 和 unknow</strong><code>any</code> 和 <code>unknow</code> 都是 TS 中的顶级类型，而 <code>unknown</code> 类型相较于 <code>any</code> 更加严格，<code>any</code> 相当于放弃了类型检查。 <br></li><li><strong>type 和 interface 区别</strong><ol><li><code>interface</code> 只能声明对象类型，<code>type</code> 可以声明任何类型，包括基础类型，联合类型，交叉类型。</li><li><code>interface</code> 可以使用 <code>extends</code> 来扩展，<code>type</code> 没有扩展功能，只能交叉或者合并。</li><li>多次声明相同名称的 <code>interface</code> 会声明合并，而定义两个同名的 <code>type</code> 会出现异常。 <br></li></ol></li><li><strong>never 和 void</strong> never 表示不应该出现的类型，比如一个从来不会有返回值的函数(while(true))，或者一个总是会抛出错误的函数。 void 表示没有任何类型，比如当一个函数返回空值时，它的返回值为 void 类型。 <br></li><li><strong>Object, object, {} 类型之间的区别</strong> 除了所有的原始类型外，所有其他类型均可以用 <code>object</code> 来标注类型, 而 <code>Object</code> 包括原始值,既:<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// ok</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// error</span></span></code></pre></div>空类型 <code>{}</code> 描述一个没有成员的对象，当你试图访问这样一个对象的任意属性时，TypeScript 会产生一个编译时错误， 但是你可以访问 <code>Object</code> 类型上定义的所有方法和属性。</li></ul><h2 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><ul><li><strong>全局模块</strong> 在默认情况下，当你开始在一个新的 ts 文件中写下代码时，它处于全局命名空间中,如在 <code>foo.ts</code> 中。<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span></span></code></pre></div>此时创建了一个新的文件 <code>bar.ts</code>。<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><strong>文件模块</strong> 如果在你的 <code>TypeScript</code> 文件的根级别位置含有 <code>import</code> 或者 <code>export</code>，那么它会在这个文件中创建一个本地的作用域。<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// foo.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span></span></code></pre></div>这个时候如果想在 <code>bar.ts</code> 中使用来自 <code>foo.ts</code> 的内容，需要显示的导入。<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bar.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><h2 id="环境声明" tabindex="-1">环境声明 <a class="header-anchor" href="#环境声明" aria-label="Permalink to &quot;环境声明&quot;">​</a></h2><p>可以通过 <code>declare</code> 关键字来告诉 <code>TypeScript</code>，你正在试图表述一个其他地方已经存在的代码。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// error</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// ok</span></span></code></pre></div><p>比如在 <code>nodejs</code> 中使用 <code>process</code>,</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>声明语句：</strong><code>declare var</code> 声明全局变量</p><p><code>declare function</code> 声明全局方法</p><p><code>declare class</code> 声明全局类</p><p><code>declare enum</code> 声明全局枚举类型</p><p><code>declare namespace</code> 声明（含有子属性的）全局对象</p><p><code>interface</code> 和 <code>type</code> 声明全局类型</p><p><code>export</code> 导出变量</p><p><code>export namespace</code> 导出（含有子属性的）对象</p><p><code>export default</code> ES6 默认导出</p><p><code>export = commonjs</code> 导出模块</p><p><code>export as namespace</code> UMD 库声明全局变量, 只能在模块文件里面使用</p><p><code>declare global</code> 扩展全局变量</p><p><code>declare module</code> 扩展模块</p><p><code>/// &lt;reference /&gt;</code> 三斜线指令 <br></p><p><strong>补充</strong>: <code>三斜线指令</code> 和 <code>import</code>的区别</p><blockquote><p>历史遗留问题，<code>三斜线指令</code>出现的时候 <code>ES6</code> 还没出来。<code>三斜线指令</code>不会将一个全局文件变成模块文件，而 <code>import</code> 会。如果你需要一个在一个全局文件 b 里用另一个文件 c 里的变量，就可以用三斜线指令，因为用 <code>import</code> 会把 b 变成一个模块文件。</p></blockquote><h2 id="模块-1" tabindex="-1">模块 <a class="header-anchor" href="#模块-1" aria-label="Permalink to &quot;模块&quot;">​</a></h2><ul><li><strong>@types</strong> 使用第三方的模块： 如果这个模块本身不包含声明文件，但是社区提供了，通过安装 <code>@types</code> 来添加声明文件:</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm i @types/jquery --save-dev</span></span></code></pre></div><ul><li><strong>全局声明</strong> 在全局模块中添加:</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// global.d.ts</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><ul><li><strong>扩展模块声明</strong> 在文件模块中添加:</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// module.d.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><ul><li><strong>使用模块</strong> 推荐使用 ES 模块的语法。</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xxx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> xxx</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li><strong>模块路径</strong><ul><li>相对模块路径，依照相对路径来就行了。<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li>动态查找，模块解析将会模仿 <code>Node模块解析策略</code>。<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul></li></ul><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><ul><li><p><strong>声明</strong> 声明有两种方式：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p><strong>可选参数和默认参数，剩余参数</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 可选参数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bas</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//默认参数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bas</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 剩余参数</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Args</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Args</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p><strong>重载</strong> 重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。举一个加法的例子。</p></li></ul><h2 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h2><p><code>TypeScript</code> 允许你覆盖它的推断，并且能以你任何你想要的方式分析它，这种机制被称为「类型断言」。<code>TypeScript</code> 类型断言用来告诉编译器你比它更了解这个类型，并且它不应该再发出错误。</p><ul><li><strong>as</strong></li><li><strong>&lt;&gt;</strong></li></ul>`,62),p=[e];function t(c,r,y,i,d,D){return o(),a("div",null,p)}const A=s(n,[["render",t]]);export{F as __pageData,A as default};
