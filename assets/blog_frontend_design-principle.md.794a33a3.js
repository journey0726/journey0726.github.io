import{_ as a,o as e,c as t,X as r}from"./chunks/framework.6e839c56.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blog/frontend/design-principle.md","filePath":"blog/frontend/design-principle.md"}'),o={name:"blog/frontend/design-principle.md"},i=r('<h2 id="单一职责原则" tabindex="-1">单一职责原则 <a class="header-anchor" href="#单一职责原则" aria-label="Permalink to &quot;单一职责原则&quot;">​</a></h2><p>一个类只负责一项职责</p><h2 id="接口隔离原则" tabindex="-1">接口隔离原则 <a class="header-anchor" href="#接口隔离原则" aria-label="Permalink to &quot;接口隔离原则&quot;">​</a></h2><p>一个类对另一个类的依赖建立在最小接口上</p><h2 id="依赖倒转原则" tabindex="-1">依赖倒转原则 <a class="header-anchor" href="#依赖倒转原则" aria-label="Permalink to &quot;依赖倒转原则&quot;">​</a></h2><ul><li>细节依赖抽象</li><li>面向接口编程</li></ul><h2 id="里氏替换原则" tabindex="-1">里氏替换原则 <a class="header-anchor" href="#里氏替换原则" aria-label="Permalink to &quot;里氏替换原则&quot;">​</a></h2><p>子类中尽量不要重新父类的方法</p><h2 id="开闭原则-opc" tabindex="-1">开闭原则 opc <a class="header-anchor" href="#开闭原则-opc" aria-label="Permalink to &quot;开闭原则 opc&quot;">​</a></h2><p>多扩展开放，对修改关闭</p><h2 id="迪米特法则" tabindex="-1">迪米特法则 <a class="header-anchor" href="#迪米特法则" aria-label="Permalink to &quot;迪米特法则&quot;">​</a></h2><p>只与直接朋友通信（出现在成员变量，方法参数，方法返回值中的）</p><h2 id="合成复用原则" tabindex="-1">合成复用原则 <a class="header-anchor" href="#合成复用原则" aria-label="Permalink to &quot;合成复用原则&quot;">​</a></h2><p>尽量使用合成/聚合的方法</p>',14),n=[i];function l(c,d,h,s,p,_){return e(),t("div",null,n)}const b=a(o,[["render",l]]);export{f as __pageData,b as default};
